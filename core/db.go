package core

import (
	"encoding/json"
	"reflect"
	"regexp"
	"strings"

	"github.com/supergiant/supergiant/common"

	etcd "github.com/coreos/etcd/client"
)

type database struct {
	keys *etcdClient
}

func newDB(etcdEndpoints []string) *database {
	return &database{newEtcdClient(etcdEndpoints)}
}

// TODO this is weird
func (db *database) setKeysAPI(kapi etcd.KeysAPI) {
	db.keys.kapi = kapi
}

func (db *database) list(r Collection, out interface{}) error {
	key := etcdKey(r.(Locatable))
	resp, err := db.keys.get(key)
	if err != nil && !isEtcdNotFoundErr(err) {
		// When listing, if it's key not found, it just means the dir has not been
		// created yet (which happens automatically when creating the first child
		// key). Here we return err ONLY if it's not that error
		return err
	}
	return decodeList(r, resp, out)
}

func (db *database) get(r Collection, id common.ID, out Resource) error {
	key := etcdKey(r.(Locatable)) + "/" + common.StringID(id) // TODO
	resp, err := db.keys.get(key)
	if err != nil {
		return err
	}
	return unmarshalNodeInto(r, resp.Node, out)
}

func (db *database) create(r Collection, id common.ID, m Resource) error {
	// NOTE we have to do this here to initialize Collection on the Resource
	r.initializeResource(m)

	key := etcdKey(m.(Locatable))

	setCreatedTimestamp(m)

	val, err := marshalResource(m)
	if err != nil {
		return err
	}

	_, err = db.keys.create(key, val)
	if err != nil {
		return err
	}

	// NOTE on create/update, we must explicitly call decorate() since we do not
	// unmarshal
	return m.decorate()
}

func (db *database) update(r Collection, id common.ID, m Resource) error {
	// NOTE we have to do this here to initialize Collection on the Resource
	r.initializeResource(m)

	key := etcdKey(m.(Locatable))

	setUpdatedTimestamp(m)

	val, err := marshalResource(m)
	if err != nil {
		return err
	}

	_, err = db.keys.update(key, val)
	if err != nil {
		return err
	}

	// NOTE on create/update, we must explicitly call decorate() since we do not
	// unmarshal
	return m.decorate()
}

func (db *database) delete(r Collection, id common.ID) error {
	key := etcdKey(r.(Locatable)) + "/" + common.StringID(id) // TODO
	_, err := db.keys.delete(key)
	return err
}

// func (db *database) listInOrder(r Collection, out interface{}) error {
// 	key := r.etcdKey(nil)
// 	resp, err := db.keys.getInOrder(key)
// 	if err != nil && !isEtcdNotFoundErr(err) {
// 		return err
// 	}
// 	return decodeOrderedList(r, resp, out)
// }

// func (db *database) createInOrder(r Collection, m OrderedResource) error {
// 	key := r.etcdKey(nil) // ID is generated by etcd
//
// 	val, err := marshalResource(m)
// 	if err != nil {
// 		return err
// 	}
//
// 	resp, err := db.keys.createInOrder(key, val)
// 	if err != nil {
// 		return err
// 	}
//
// 	// We must set ID value on model, since it is auto-generated by etcd
// 	m.setID(lastKeySegment(resp.Node.Key))
//
// 	return nil
// }

func (db *database) compareAndSwap(r Collection, id common.ID, old Resource, new Resource) error {
	key := etcdKey(old.(Locatable))

	oldVal, err := marshalResource(old)
	if err != nil {
		return err
	}
	newVal, err := marshalResource(new)
	if err != nil {
		return err
	}

	_, err = db.keys.compareAndSwap(key, oldVal, newVal)
	return err
}

// This zeros out field values with db:"-" tag, and omitsempty with JSON.
func stripNonDbFields(m Resource) interface{} { // we return a copy here so we don't strip fields on the actual object
	rv := reflect.ValueOf(m).Elem()

	rxp := regexp.MustCompile("(.+)Resource")
	typeName := rxp.FindStringSubmatch(rv.Type().Name())[1]

	oldT := rv.FieldByName(typeName).Elem()
	newT := reflect.New(oldT.Type())
	newT.Elem().Set(oldT)

	out := newT.Interface()

	val := reflect.ValueOf(out).Elem()
	val.Set(newT.Elem())

	t := val.Type()

	for i := 0; i < val.NumField(); i++ {
		tag := string(t.Field(i).Tag)

		if strings.Contains(tag, "db:\"-\"") {
			field := val.Field(i)
			field.Set(reflect.Zero(field.Type()))
		}
	}

	return out
}

func marshalResource(m Resource) (string, error) {
	t := stripNonDbFields(m)

	out, err := json.Marshal(t)
	if err != nil {
		return "", err
	}
	return string(out), nil
}

func unmarshalNodeInto(r Collection, node *etcd.Node, m Resource) error {
	if err := json.Unmarshal([]byte(node.Value), m); err != nil {
		return err
	}
	r.initializeResource(m)
	return m.decorate()
}

// CreateInOrder stuff...
// Was going to use "base" as a word here, like with file names. But it seems
// entirely weird to me that people inventing filesystems looked at:
//
// /home/dir/filename.txt
//
// and decided that "filename.txt" was the "base name".
func lastKeySegment(key string) common.ID {
	strs := strings.Split(key, "/")
	segment := strs[len(strs)-1]
	return &segment
}

func isEtcdNotFoundErr(err error) bool {
	etcdErr, ok := err.(etcd.Error)
	return ok && etcdErr.Code == etcd.ErrorCodeKeyNotFound
}

func decodeList(r Collection, resp *etcd.Response, out interface{}) error {
	itemsPtr, itemType := getItemsPtrAndItemType(out)

	// TODO we do this here, because the above method will initialize the Items
	// slice for us. Needs work.
	if resp == nil {
		return nil
	}

	for _, node := range resp.Node.Nodes {
		// Interface() is called to convert the new item Value into an interface
		// (that we can unmarshal to. The interface{} is then cast to ResourceList type.
		obj := reflect.New(itemType).Interface().(Resource)
		if err := unmarshalNodeInto(r, node, obj); err != nil {
			return err
		}

		// Get the Value of the unmarshalled object, and append it to the slice.
		newItem := reflect.ValueOf(obj).Elem().Addr()
		newItems := reflect.Append(itemsPtr, newItem)
		itemsPtr.Set(newItems)
	}
	return nil
}

// // TODO feel like there's a DRYer or cleaner way to do this
// func decodeOrderedList(r Collection, resp *etcd.Response, out interface{}) error { /// ------------------- just changed to Resource from OrderedResource
// 	itemsPtr, itemType := getItemsPtrAndItemType(out)
//
// 	if resp == nil {
// 		return nil
// 	}
//
// 	for _, node := range resp.Node.Nodes {
// 		// Interface() is called to convert the new item Value into an interface
// 		// (that we can unmarshal to. The interface{} is then cast to Resource type.
//
// 		obj := reflect.New(itemType).Interface().(OrderedResource)
//
// 		if err := unmarshalNodeInto(r, node, obj); err != nil {
// 			return err
// 		}
//
// 		obj.setID(lastKeySegment(node.Key))
//
// 		// Get the Value of the unmarshalled object, and append it to the slice.
// 		newItem := reflect.ValueOf(obj).Elem().Addr()
// 		newItems := reflect.Append(itemsPtr, newItem)
// 		itemsPtr.Set(newItems)
// 	}
// 	return nil
// }
